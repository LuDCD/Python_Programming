#!/usr/bin/env python
# -*- coding:utf8 -*-

"""
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

说明:
一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

@author: ZHOU Heng
"""


class Solution(object):

    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        flag = True

        # 数字 1-9 在每一行只能出现一次。
        # 数字 1-9 在每一列只能出现一次。
        for i in range(9):
            for j in range(9):
                e = board[i][j]
                rows = board[i]
                cols = [x[j] for x in board]
                if e != ".":
                    if rows.count(e) > 1 or cols.count(e) > 1:
                        flag = False
                        return flag

        # 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
        for i in range(3):
            for j in range(3):
                subBoard = []
                [subBoard.extend(x[j * 3 : j * 3 + 3]) for x in board[i * 3 : i * 3 + 3]]
                for e in subBoard:
                    if e != "." and subBoard.count(e) > 1:
                        flag = False
                        return flag

        if flag:
            return flag


def test():
    sol = Solution()
    # board = [
    #     ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    #     ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    #     [".", "9", "8", ".", ".", ".", ".", "6", "."],
    #     ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    #     ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    #     ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    #     [".", "6", ".", ".", ".", ".", "2", "8", "."],
    #     [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    #     [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    # ]

    # board = [
    #     ["8", "3", ".", ".", "7", ".", ".", ".", "."],
    #     ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    #     [".", "5", "8", ".", ".", ".", ".", "6", "."],
    #     ["5", ".", ".", ".", "6", ".", ".", ".", "3"],
    #     ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    #     ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    #     [".", "6", ".", ".", ".", ".", "2", "8", "."],
    #     [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    #     [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    # ]

    # board = [
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    #     [".", ".", ".", ".", ".", ".", ".", ".", "."],
    # ]

    board = [
        [".", ".", ".", ".", "5", ".", ".", "1", "."],
        [".", "4", ".", "3", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "3", ".", ".", "1"],
        ["8", ".", ".", ".", ".", ".", ".", "2", "."],
        [".", ".", "2", ".", "7", ".", ".", ".", "."],
        [".", "1", "5", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "2", ".", ".", "."],
        [".", "2", ".", "9", ".", ".", ".", ".", "."],
        [".", ".", "4", ".", ".", ".", ".", ".", "."],
    ]
    print(sol.isValidSudoku(board))


if __name__ == "__main__":
    test()
